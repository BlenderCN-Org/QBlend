import numpy as np
from .molio import MoleculeFile, name2sym
from ..molecule import Molecule, Atom, Residue

from ..utils import from_angstrom, to_angstrom

class PdbFile(MoleculeFile):
    __slots__ = []
    FEATURES = {
        'trajectory': False,
        'volume': False,
        'basis': False,
        'loading': True,
        'saving': True,
        }

    def __init__(self, *args, **kw):
        super(PdbFile, self).__init__(*args, **kw)

    def _read(self, mol, **kw):
        assert self.loading
        assert mol != None and isinstance(mol, Molecule)
        new_mol = self.is_first or len(mol) == 0
        new_bonds = len(mol.bonds) == 0
        natoms = 0
        iatom = 0
        start_atoms = False

        for line in self.readlines():
            if not start_atoms and line[0:6] == 'MODEL ' or line[0:6] == "ATOM  " or line[0:6] == "HETATM":
                start_atoms = True

            if start_atoms and line[0:6] == "ATOM  " or line[0:6] == "HETATM":
                rtype   = line[0:6].strip()
                idx     = int(line[6:11].strip())
                atnm    = line[12:16].strip()
                loc     = line[16].strip()
                resnm   = line[17:21].strip()
                chid    = line[21].strip()
                resnr   =int(line[22:26].strip())
                ins     = line[27].strip()
                x       = from_angstrom(line[30:38].strip())
                y       = from_angstrom(line[38:46].strip())
                z       = from_angstrom(line[46:54].strip())
                occ     = line[54:60].strip()
                occ     = float(occ) if len(occ) else 1.0
                temp    = line[60:66].strip()
                temp    = float(temp) if len(temp) else 0.0
                segid   = line[72:76].strip()
                sym     = line[76:78].strip()
                chg     = line[78:].strip()
                chg     = int(chg) if len(chg) else 0
                if sym == "":
                    sym = name2sym(atnm)
                else:
                    sym = sym.lower().capitalize()

                atom = Atom(iatom, sym, atnm)
                atom.pdbrec = rtype
                residue = mol.find_residue(resnm, resnr, ins, chid)

                if residue == None:
                    residue = Residue(resnm, resnr, ins, chid)

                atom.residue = residue

                atom.formal_charge = chg
                coord = np.array((x,y,z))
                self.add_atom(new_mol, mol, atom, coord)
                iatom += 1

            elif line[0:6] == "CONECT":
                if new_bonds:
                    mol.reset_bonds()
                    new_bonds = False
                iatom = int(line[6:11].strip())-1
                conn = []
                for i in range(11, 32, 5):
                    if len(line) > i:
                        conn.append(int(line[11:16].strip())-1)
                mol.add_bond(iatom, conn)
            elif start_atoms and line[0:3] == "TER":
                pass
            elif start_atoms and line[0:6] == "ENDMDL":
                start_atoms = False
            elif line[0:3] == "END":
                start_atoms = False
                break
        if iatom == 0:
            return None
        if self.connect_atoms and new_bonds:
            mol.generate_bonds()

        if not self.is_first and self.natoms != iatom:
            raise IOError("Invalid atom count")

        self.natoms = iatom
        self.frame += 1

        return mol

    def _write(self, mol, **kw):
        assert self.saving
        assert mol != None and isinstance(mol, Molecule)
        atm = "%-6s%5d %4.4s%1.1s%-3.3s %1.1s%4d%1.1s   %8.3f%8.3f%8.3f%6.2f%6.2f          %2s%2s"
        ter = "%-6s%5d      %-3.3s %1.1s%4d%1.1s"
        if self.is_first:
            self.writeline('%-6s    %-59s' % ("AUTHOR", "GENERATED BY PYLIB2"))
            title = mol.title
            i = 0
            while len(title) > 0:
                eol = max(mol.title.find('\n'), 59)
                if eol > 0:
                    self.writeline("%-6s  %s%-59s", "TITLE",str(i) if i > 0 else ' ', mol.title[:eol])
                    i=i+1
                title = title[eol+1:]
        self.writeline("%-10s%4d" % ("MODEL", self.frame+1))

        lastres, lastnr = None, 0
        for atom, coord in mol:

            if self.test(mol,atom,coord):
                atnr = (atom.index+1) % 10000
                atnm = (atom.name[:4] if len(atom.name) > 2 else (atom.name +" ")).upper()
                fq = ("%+2d" % atom.formal_charge)  if abs(atom.formal_charge) > 0 else ""
                if lastres and lastres.chainid != atom.chainid:
                    line = ter % ("TER", lastnr, lastres.resnm, lastres.chainid, lastres.resnr, lastres.inscode)
                    self.writeline(line)

                line = atm % (atom.pdbrec, atnr, atnm, \
                                        atom.altloc, atom.resnm, atom.chainid, atom.resnr, atom.inscode, \
                                        to_angstrom(coord[0]), to_angstrom(coord[1]), to_angstrom(coord[2]), \
                                        atom.occup, atom.tempfactor, \
                                        atom.symbol.upper(),fq)
                self.writeline(line)
                lastnr = atnr
                lastres = atom.residue
        if lastres and lastres.chainid != ' ':
            line = ter % ("TER", lastnr, lastres.resnm, lastres.chainid, lastres.resnr, lastres.inscode)
            self.writeline(line)

        self.writeline("ENDMDL")

        if self.connect_atoms:
            for i,j in mol.bonds:
                atom2 = mol[j]
                atom1 = mol[i]
                if self.test(mol,atom1[0],atom1[1]) and self.test(mol,atom2[0],atom2[1]):
                    self.writeline("CONECT%5d%5d" % (i+1,j+1))

        self.frame += 1
        return True

    def close(self):
        if self.saving and self.is_open:
            self.writeline("END")
        super(PdbFile, self).close()
